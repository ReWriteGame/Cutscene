//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/InputSystem/UserInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @UserInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @UserInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""UserInput"",
    ""maps"": [
        {
            ""name"": ""Hero"",
            ""id"": ""a0d526cf-36d9-47c9-a46b-c1b1f614186a"",
            ""actions"": [
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""1b551783-6300-4d23-9ab0-f2b2c7fd3e74"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""08bdc300-f868-4419-b01d-5f6082ddcc8a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""PassThrough"",
                    ""id"": ""0dfd89e3-099f-4714-97a5-0dcdedb71dec"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""1053e778-dd91-40db-b70b-7b38fd722bb0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ActionMagic1"",
                    ""type"": ""Button"",
                    ""id"": ""2ab8910f-bce2-4f46-b2d1-5f20f2ccca37"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ActionMagic2"",
                    ""type"": ""Button"",
                    ""id"": ""dcf31446-55dc-4565-83e8-44f815bd5fae"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ActionMagic3"",
                    ""type"": ""Button"",
                    ""id"": ""e131b391-8141-40e8-adbd-e6014ce77889"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""77854a3f-4cd6-4ece-a383-b5c8b6c72cbd"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""219480d6-ff8d-4b50-a0ce-8657f45b492e"",
                    ""path"": ""2DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""bf837997-b267-4550-994e-206a1016172c"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""93723055-1471-4e3d-b2bf-f3d250fa082f"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""b165b410-e328-4db7-826b-8b950d9d4f5c"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""aa2cee18-a0d1-45d4-9e05-93b89805c1cd"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrow"",
                    ""id"": ""35308ede-3378-491b-a02b-d24da5ced266"",
                    ""path"": ""2DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""cf847e2b-0172-41a0-a2b9-00b6f0fb5dd6"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""6a7a8860-7890-47cf-9581-5acc133e09e3"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0753119c-77a3-4d3e-b29f-49296b60457f"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""686508d3-ac53-47b0-8c3d-d532c51465eb"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""27f57ffb-be55-4704-8a34-bbc90770036c"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6f0653ed-500e-4b54-a675-78be9c95f2ea"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""ActionMagic1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3a4adc42-3562-4f2b-a23e-4cef29557342"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""ActionMagic2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""35825775-2bc3-4ecf-a0e9-b12293707279"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""ActionMagic3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""82419a6c-3292-48c8-96d0-20e78e66a296"",
                    ""path"": ""<Pointer>/delta"",
                    ""interactions"": """",
                    ""processors"": ""InvertVector2(invertX=false,invertY=false),ScaleVector2(x=0.05,y=0.05)"",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""926644e4-4a10-4f1b-97fd-f83875b6750a"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": ""InvertVector2(invertX=false,invertY=false),StickDeadzone,ScaleVector2"",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<XInputController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<DualShockGamepad>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""KeyboardMouse"",
            ""bindingGroup"": ""KeyboardMouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Hero
        m_Hero = asset.FindActionMap("Hero", throwIfNotFound: true);
        m_Hero_Look = m_Hero.FindAction("Look", throwIfNotFound: true);
        m_Hero_Move = m_Hero.FindAction("Move", throwIfNotFound: true);
        m_Hero_Sprint = m_Hero.FindAction("Sprint", throwIfNotFound: true);
        m_Hero_Jump = m_Hero.FindAction("Jump", throwIfNotFound: true);
        m_Hero_ActionMagic1 = m_Hero.FindAction("ActionMagic1", throwIfNotFound: true);
        m_Hero_ActionMagic2 = m_Hero.FindAction("ActionMagic2", throwIfNotFound: true);
        m_Hero_ActionMagic3 = m_Hero.FindAction("ActionMagic3", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Hero
    private readonly InputActionMap m_Hero;
    private IHeroActions m_HeroActionsCallbackInterface;
    private readonly InputAction m_Hero_Look;
    private readonly InputAction m_Hero_Move;
    private readonly InputAction m_Hero_Sprint;
    private readonly InputAction m_Hero_Jump;
    private readonly InputAction m_Hero_ActionMagic1;
    private readonly InputAction m_Hero_ActionMagic2;
    private readonly InputAction m_Hero_ActionMagic3;
    public struct HeroActions
    {
        private @UserInput m_Wrapper;
        public HeroActions(@UserInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Look => m_Wrapper.m_Hero_Look;
        public InputAction @Move => m_Wrapper.m_Hero_Move;
        public InputAction @Sprint => m_Wrapper.m_Hero_Sprint;
        public InputAction @Jump => m_Wrapper.m_Hero_Jump;
        public InputAction @ActionMagic1 => m_Wrapper.m_Hero_ActionMagic1;
        public InputAction @ActionMagic2 => m_Wrapper.m_Hero_ActionMagic2;
        public InputAction @ActionMagic3 => m_Wrapper.m_Hero_ActionMagic3;
        public InputActionMap Get() { return m_Wrapper.m_Hero; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HeroActions set) { return set.Get(); }
        public void SetCallbacks(IHeroActions instance)
        {
            if (m_Wrapper.m_HeroActionsCallbackInterface != null)
            {
                @Look.started -= m_Wrapper.m_HeroActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_HeroActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_HeroActionsCallbackInterface.OnLook;
                @Move.started -= m_Wrapper.m_HeroActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_HeroActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_HeroActionsCallbackInterface.OnMove;
                @Sprint.started -= m_Wrapper.m_HeroActionsCallbackInterface.OnSprint;
                @Sprint.performed -= m_Wrapper.m_HeroActionsCallbackInterface.OnSprint;
                @Sprint.canceled -= m_Wrapper.m_HeroActionsCallbackInterface.OnSprint;
                @Jump.started -= m_Wrapper.m_HeroActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_HeroActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_HeroActionsCallbackInterface.OnJump;
                @ActionMagic1.started -= m_Wrapper.m_HeroActionsCallbackInterface.OnActionMagic1;
                @ActionMagic1.performed -= m_Wrapper.m_HeroActionsCallbackInterface.OnActionMagic1;
                @ActionMagic1.canceled -= m_Wrapper.m_HeroActionsCallbackInterface.OnActionMagic1;
                @ActionMagic2.started -= m_Wrapper.m_HeroActionsCallbackInterface.OnActionMagic2;
                @ActionMagic2.performed -= m_Wrapper.m_HeroActionsCallbackInterface.OnActionMagic2;
                @ActionMagic2.canceled -= m_Wrapper.m_HeroActionsCallbackInterface.OnActionMagic2;
                @ActionMagic3.started -= m_Wrapper.m_HeroActionsCallbackInterface.OnActionMagic3;
                @ActionMagic3.performed -= m_Wrapper.m_HeroActionsCallbackInterface.OnActionMagic3;
                @ActionMagic3.canceled -= m_Wrapper.m_HeroActionsCallbackInterface.OnActionMagic3;
            }
            m_Wrapper.m_HeroActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Sprint.started += instance.OnSprint;
                @Sprint.performed += instance.OnSprint;
                @Sprint.canceled += instance.OnSprint;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @ActionMagic1.started += instance.OnActionMagic1;
                @ActionMagic1.performed += instance.OnActionMagic1;
                @ActionMagic1.canceled += instance.OnActionMagic1;
                @ActionMagic2.started += instance.OnActionMagic2;
                @ActionMagic2.performed += instance.OnActionMagic2;
                @ActionMagic2.canceled += instance.OnActionMagic2;
                @ActionMagic3.started += instance.OnActionMagic3;
                @ActionMagic3.performed += instance.OnActionMagic3;
                @ActionMagic3.canceled += instance.OnActionMagic3;
            }
        }
    }
    public HeroActions @Hero => new HeroActions(this);
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("KeyboardMouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    public interface IHeroActions
    {
        void OnLook(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnActionMagic1(InputAction.CallbackContext context);
        void OnActionMagic2(InputAction.CallbackContext context);
        void OnActionMagic3(InputAction.CallbackContext context);
    }
}
